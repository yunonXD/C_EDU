시간복잡도

코딩 테스트핵심? << 시간복잡도를 고려해서 선택
해당 시간 안에 도달하지 못하면 결국 오답!


1-1 시간복잡도 표기법 알아보기
    주어진 문제를 해결하기 위한 연산 횟수
    1억번의 연산 = 1초
    시간 복잡도 측면 < c++, c 가 가장 빠름

    시간 복잡도 정의
        - 빅 오메가 : 가장 좋은 케이스
        - 빅 세타   : 보통의 케이스
        - 빅 오     : 최악의 케이스

    테스트케이스의 기준은 빅 오(최악의 케이스) 를 기준으로 잡고 작성해야함. (최악을 고려해서 작성)

    알고리즘 선택 기준으로 사용하기?
        - 상황에 따라서 버블소팅, 머지소팅을 선택할 수 있는 능력을 기르는것.
    시간복잡도를 바탕으로 코드 로직 개선하기
        - 상수는 계산에서 제외
        - 가장 많이 중첩된 반복문의 수행 횟수가 시간 복잡도의 기준. ( if, while 도 반복이 될 수 잇음)

    정리
    - 시간복잡도 >> 최악의 케이스를 고려 O(n)
    - 시간복잡도 도출할 때 상수는 무시하며 중첩되는(반복) 부분을 기준으로.
    - 알고리즘 선택기준 , 시간초과시 비효율 코드가 어디인지 판단
