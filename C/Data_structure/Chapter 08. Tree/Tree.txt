-----------------------------------------------------
트리의 개요
-----------------------------------------------------

ㅁ-> ㅁ-> ㅁ-> ㅁ-> ㅁ 선형구조 (연결리스트)
    - 공부한것?
        - 연결하는 방법
        - 구조체를 정의하는 방법 (노트 추가 삭제 연결 이런거 정의한적 없음)
        - 실질적으로 공부한것은? 인덱스를 기반으로 한 데이터의 삽입


비선형자료구조는 선형구조와 완전 다르다. 제대로 선형을 공부했다면 어려울것.
    - 데이터의 저장 삭제 이런것만 두고 보기에는 넘 크다
    - 코드 레벨 이해는 해도 왜 이렇게 정의했는지 이해하기 힘들다
    - 구성하는 도구를 만들고 이것으로 표현하는 방법 (저장이 아니다) 이 보통임.


대략적인 트리의 모습
        ㅁ
      /    \
     ㅁ     ㅁ
   /  | \
  ㅁ  ㅁ ㅁ

트리를 만든다?
    1. 도구를 만든다 (왜 쓰는지? 언제쓰는지? 에 대한 의문에 답을 할 수 있게 생기진 않았음)
    2. 수식틀을 만든다
    3. profit! 


트리는 계층적 관계를 표현하는 자료구조 
    - 계층적 관계? 쉽게 말해서 가족, 회사 조직도?
    - 트리는 단순한 데이터 저장이 아닌 데이터를 표현하는 도구


트리에 사용되는 용어
    - 노드
    - 간선
    - 루트노드
    - 단말노드
    - 내부노드

서브트리
    - 서브트리 역시 서브트리로 이루어져 있다는 점에서 대칭이라면(이진트리)"재귀적"임을 알 수 있음


이진트리
    - 루트 노드를 중심으로 두 개의 서브 트리로 나눠짐
    - 나눠진 두 서브트리 모두가 이진트리 형태를 가져야함
    - 공집합도 이진트리에서는 노드로 간주

이진트리의 높이? -> 레벨과 같음 레벨 0~ 3이라면 높이는 3
이진트리가 모든 레벨이 꽉 차면? 포화 이진트리
이진트리가 잘 채워져 있으면? -> 완전 이진트리


이진트리 구현
    - 배열 
        - 노드에 번호를 부여하고 그 번호에 해당하는 값을 배열의 인덱스 값으로 활용
        - 배열의 첫번째 요소 사용 안함
    - 연결 리스트 (보통 이걸로 함)
        - 연결 리스트 기반에는 트리의 구조와 리스트의 연결 구조가 일치
        - 따라서 구현과 관련된 직관적인 이해가 좋은 편




-----------------------------------------------------
이진 트리 순회
-----------------------------------------------------

순회의 기준은 루트 노드를 언제 방문하냐에 있음
루트를 방문하는 시점을 기준으로 중위 후위 전위 순회로 나뉨

             C
           /   \
          L     R
    1. 중위 순회 : L -> C -> R
    2. 후위 순회 : L -> R -> C
    3. 전위 순회 : C -> L -> R





-----------------------------------------------------
이진트리 -> 수식 의 구현
-----------------------------------------------------

이해는 쉬운데 "납득"이 가질 않는다?
수식이 메모리 관점에서 작동해서 그럴수도 있다

사칙연산을 트리로 구현한다

             -
           /   \
          +     1
        /   \
       7     *
           /   \
          4     2
 7+(4*2) -1 = 14 의 과정 및 모양


중위 표기법 ->후위표기법 ->수식 트리 의 표기법으로 바꾸기

중위 ->후위는 이미 구현 해놨으니 후위 ->수식을 알아야함


수식 트리 코드로 옮기기
    - 1 2 + 7 * (스택)      기본 상태

    - ㅁ 2 + 7 * (1)

    - ㅁ ㅁ + 7 * (1 ,2)    스택에 1 2 쌓기

    - ㅁ ㅁ ㅁ 7 * ()       스택에서 꺼내서 트리 만들기
            +
          /   \
         1     2

    - ㅁ ㅁ ㅁ 7 * 
            +
       (  /   \  )  스택에 넣어주기 (루트 노드의 주소값 전달)
         1     2
    
    - ㅁ ㅁ ㅁ ㅁ *

            7
            +
       (  /   \  ) 
         1     2

    - ㅁ ㅁ ㅁ ㅁ ㅁ 
        최종 형태. (형성된 트리는 다시 스택에 넣어서 결과를 산출)
                *
              /   \
             +     7
           /   \
          1     2

             
