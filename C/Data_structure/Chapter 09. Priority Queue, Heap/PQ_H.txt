-----------------------------------------------------
우선순위 큐와 힙
-----------------------------------------------------

트리의 연장선에 있는 내용  
Queue 는 선형 자료구조인 반면에 우선순위 Queue는 비선현 자료구조인



-----------------------------------------------------
우선순위 큐의 이해
-----------------------------------------------------

선입선출의 구조 Queue. 
먼저 들어온 데이터는 먼저 빠져나가는 줄서기와 같은 구조

허나 우선순위 Queue는 들어가는 순서 나가는 순서가 상관이 없다.

입구------------ 출구
  ->            ->
    ------------
    그렇담 데이터를 뽑아낼때는? 우선순위를 기반으로 데이터를 추출 그래서 우선순위 Queue라 부름
    특성을 이해했어도 구현으로 초점을 맞춰서 생각

    똑같이 inqueue dequeue 가 있으나 inqueue는 정말 데이터를 넣기만 하고 dequeue 에서 우선순위를 바탕으로 추출
    데이터의 우선순위는 사용자(개발자) 가 인위적으로 설정할 수 있다



-----------------------------------------------------
우선순위 큐 구현방법
-----------------------------------------------------
구현하는 3가지 방법
    - 배열을 기반으로 구현 1 
    - 연결 리스트 기반으로 구현 2 
    - 힙 을 이용하는 방법 (동적할당) 3

혹은 공부하는 입장이 아닌 실무 입장에서 자료의 조정이 작다면 배열,리스트로 해도 상관 x
허나 수많은 데이터의 처리가 필요로 한다면?


    1 배열 기반 
       [ 1 3 4 5 ㅁ ㅁ ]    모양만 봐도 정말 쉬워보임 (데이터의 갯수가 적다면. worst case? >> 1만개 데이터 끝에 있을때)
       이동과 비교가 부담스러운 구현방법

    2 연결 리스트 기반
        head -> 1 ->3 -> 4-> 5/     똑같이 우선순위가 가장 낮은, 높은 데이터가 등장하면 결국엔 worst case 가 1만개면 1만번 확인을 함
        심지어 연결 리스트는 비교 노드의 연산이 엄청 많아짐

    3 힙 기반
        놀랍게도 힙은 완벽히 "완전 이진 트리" 이다
        최대힙 : 루트노드는 자식노드보다 크거나 같아야함
        최소힙 : 루트노드는 자식노드보다 작거나 같아야함


-----------------------------------------------------
힙 구현
-----------------------------------------------------

힙과 우선순위는 서로 같다 의 정의는 성립되지 않는다.
우선순위 큐를 구현하는데 있어서 사용해야 하는 아주 적절한 "방법" 이 힙일뿐임 오해 ㄴ

데이터의 저장 / 삭제 과정을 이해하는게 어렵지만 아주 핵심인 파트


-----------------------------------------------------
성능 평가
-----------------------------------------------------
배열 기반 우선순위 큐의 시간 복잡도
- 배열 기반 데이터 삽입의 시간 복잡도   > O(n)
- 배열 기반 데이터 삭제의 시간 복잡도   > O(1)


연결 기반 우선순위 큐의 시간 복잡도
- 연결 기반 데이터 삽입의 시간 복잡도   > O(n)
- 연결 기반 데이터 삭제의 시간 복잡도   > O(1)


힙 기반 우선순위 큐의 시간 복잡도
- 힙 기반 데이터 삽입의 시간 복잡도   > O(log^2 n)
- 힙 기반 데이터 삭제의 시간 복잡도   > O(log^2 n)


-----------------------------------------------------
힙 구현에 있어서 숙지할 내용
-----------------------------------------------------
- 완전 이진트리
- 배열 기반으로 인덱스 0 요소는 비워둔다
- 힙에 저장된 노드의 개수와 마지막 노드의 고유 번호는 일치
- 노드의 고유 번호는 노드가 저장되는 배열의 인덱스 값이 된다
- 우선순위를 나타내는 정수 값이 작을수록 높은 우선순위를 나타낸다고 가정함