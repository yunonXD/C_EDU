----------------------------------------
테이블 자료구조의 이해
----------------------------------------

데이터를 저장하는데 있어서 기본 데이터가 "쌍"을 이루는 것을 테이블이라 함

|Key         value  |
|99001       가     |
|99002       나     |
|99003       다     |
|99004       라     |
|...         ...    |

키값에 대한 value 의 정보 ("나" 가지고 있는 여러 정보들)
키를 이용한 저장과 탐색을 진행함

AVL 트리 시간 복잡도 : O(log2n)
테이블 자료구조 복잡도 : O(1)

시간복잡도가 훌륭하지만 약간의 연산을 요구하고 메모리적인 단점, 그리고 보간탐색같이 사용 반경이 제한적임


사전 구조, 맵이라고 표현하기도 함 == 테이블


데이터를 저장하고 유효한 주소값으로 변환해주기 위해
해쉬 알고리즘을 통해 키를 정해줌


해쉬 저장법
- 선형 조사법 (liner Probing)
    ->클러스터 현상이 발생 (데이터가 나란히 저장된다)
    ->선형 조합법 빈자리 찾기 과정 f(k)+1 ->f(k)+2 ->...
    ->실제로 쓰이는건 아니고 문제점 언급용 예시임

- 이차 조사법
    ->충돌시 다음에는 제곱위치에 배치 (점점 배치 위치가 멀어짐)
    ->f(k)+1^2 ->f(k)+2^2 ->f(k)+3^2 ->f(k)+4^2
    ->슬롯에 DELETED 상태를 별도로 표시해 둬야함
        (삭제상태 ->이 자리에 유효 데이터가 있었고 해당 데이터가 n^2위치로 이동했음을 의미)
        나중엔 모든 슬롯이 DELETED 상태가 되어버림(해결책 필요)

- 이중해쉬
    ->실질적인 이용 방법
    ->1차 해쉬 h1(k) =k%10
    ->2차 해쉬 h2(k) =1+(k%7)

- 체이닝(닫힌 어드레싱 모델)
    ->2차원 형태로 연결 리스트를 구성하는 모델
    ->해당 자리에 이미 해쉬가 자리 잡고 있으면 자리를 절때 내주지 않음
    
    0 ㅁ-> slot-> slot/
    1 ㅁ-> slot/
    2 ㅁ->
    3 ㅁ->
    4 ㅁ-> slot-> slot/
    5 ㅁ->
    6 ㅁ-> slot-> slot-> slot-> slot/
    7 ㅁ->