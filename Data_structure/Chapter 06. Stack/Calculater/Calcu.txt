
스택과 ADT 구조를 가지는 계산기를 구현해보자.

 - (3+4) x (2-1) + (4/2) - (2+(4+1)) 같은 복잡한 구조의 계산이 가능하다
 - 소괄호를 파악하여 그 부분을 먼저 계산한다
 - 연산자 우선순위의 근거로 연산의 순위를 결정한다

계산기 구현에 필요한 알고리즘은 스택과 별개.

    수식의 표기법
        - 중위 표기법
            5 + 2 / 7
            수식 내에 연산 순서가 담겨있지 않음 (그래서 소괄호와 연산자 우선순위를 정의해야함)

        - 전위 표기법
            + 5 / 2 7

        - 후위 표기법
            5 2 7 / +
            수식 내에 연산의 순서에 대한 정보가 담겨있음 (수식이 나열된 순서대로 진행 >> / 다음 + 진행)

    프로그램은 후위가 가장 쉽다.
    즉 우리는 중위로 기입하되 후입으로 프로그램을 짤 것임.


-----그렇다면 중위 표기법을 더 쉬운 후위표기법으로 바꾸는 방법은?------
--------------------------------
    5 + 2 / 7 ===> ㅁ ㅁ ㅁ ㅁ ㅁ
    일탄 숫자는 차례대로 옮기기
--------------------------------
    ㅁ + 2 / 7 ===> 5 ㅁ ㅁ ㅁ ㅁ 
    연산자는 별도의 스택에 (1개) 옮겨담기
--------------------------------
    ㅁ ㅁ 2 / 6 ===> 5 ㅁ ㅁ ㅁ ㅁ
             +
            ---
    별도노드 ㅇ
--------------------------------
    ㅁ ㅁ ㅁ / 6 ===> 5 2 ㅁ ㅁ ㅁ 
    이미 별도의 스택이 차있다면?
--------------------------------
    ㅁ ㅁ ㅁ ㅁ 6 ===> 5 2 6 ㅁ ㅁ 

    연산자 우선순위를 판단하여
    스택에 이미 들어있는 연산자의 우선순위가 현재보다 더 높다면 (ex. 나눗셈이 이미 들어있는데 +의 차례라면?)
        - 이미 스택에 있는 연산자를 오른쪽으로 옮기고 현재의 연산자를 스택에 쌓는다 (비우고 쌓기)
    스택에 이미 들어있는 연산자의 우선순위가 현재보다 더 낮다면 (ex. + 가 이미 들어있는데 곱셈의 차례라면?)
        - 이미 들어있는 연산자 위에 현재의 연산자를 쌓는다.

    그럼 우선순위가 동일하다면? 먼저 등장한 숫자가(스택에 이미 있는) 우선순위가 더 높음(원래 같은 우선순위는 앞에서 먼저 계산함)
    그리고 스택이 이미 2개 있다면? 2개 스택 각각 모두 개별로 진행

             /
             +
            ---
    별도노드 ㅇ
--------------------------------    
    ㅁ ㅁ ㅁ ㅁ ㅁ ===> 5 2 6 ㅁ ㅁ 
    그 다음은 스택에서 차례대로 pop 하여 옮겨주기
    ㅁ ㅁ ㅁ ㅁ ㅁ ===> 5 2 6 / +

             /
             +
            ---
    별도노드 ㅇ
--------------------------------------------------------------------