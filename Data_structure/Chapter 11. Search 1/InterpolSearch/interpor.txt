-----------------------------------------
탐색의 이해와 보간 탐색
-----------------------------------------

탐색을 떠올리면? 선형? 이진탐색? 그렇다면 이진을 개선시킨 보간탐색에 대해?

효율적인 탐색을 위해서는 "찾는 방법" 에 대한 고민만 하는 것이 아닌..
    효율적인 탐색을 위한 "저장 방법"에 대한 사항도 고려
    효율적인 탐색의 대표주자 : 트리


----------------------------------------
보간 탐색
-----------------------------------------
(이미 정렬이 다 되어있다고 판단 했을 때)
이진탐색은 무조건 가운데 부터 탐색에 들어가지만..
보간 탐색은 찾으려는 데이터의 위치를 대략적으로, 조금 더 자세하게 근접한 위치부터 (비례해서) 탐색함
즉.. 단번에 탐색을 성공 할 가능성이 있음. (최상의 빅 오)
그렇지 않더라도 근처까진 접근함


----------------------------------------
보간 탐색-비례식 구성
-----------------------------------------

탐색 위치의 인덱스 값 계산식 (메모참고)

A : Q = (high - low) : (s - low)

원래 구현했던 재위 이진탐색 알고리즘에서 mid 부분을

//mid = (first+last)/2 원래 코드
mid = ( (double)(target-arr[first]) /(arr[last]-arr[first]) * (last-first) ) + first;

로 바꿔주면 끝.
이것이 유일한 이진탐색과의 차이점(약간의 버그와 함께)




