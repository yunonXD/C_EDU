-------------------------------------
그래프의 이해
-------------------------------------

쾨니히스베르크의 다리 문제
모든 다리를 한 번씩만 건너서 처음 출발한 장소로 돌아올 수 있는가?

정점과 간선으로 표현해서 불가능함을 증명함

그래프는 표현 방법이며 그래표로 표현한 별도의 알고리즘을 학습

-------------------------------------
그래프의 종류
-------------------------------------
 -무방향 그래프 /무방향 완전 그래프
 -방향 그래프   /방향 완전 그래프
 -무방향 가중치 그래프
 -방향 가중치 그래프
 -부분 가중치 그래프

 
-------------------------------------
그래프의 집합 표현
-------------------------------------

V <<정점의 표현
G <<간선의 표현

V(G1) = {A ,B ,C D}
E(G1) = {(A,B) ,(A,C) ,(A,D) ,(B ,C) ,(C,D)}

V(G2) = {A ,B ,C D}
E(G2) = {(A,C) ,(A,D) ,(B ,C)}


V(G3) = {A ,B ,C D}
E(G3) = {<A,B> ,<A,C> ,<D,A>}


V(G4) = {A ,B ,C D}
E(G4) = {<A,C> ,<B,C> ,<D,A>}



-------------------------------------
그래프의 ADT
-------------------------------------

void GraphInit(UALGraph *pg ,int nv);
    - 그래프의 초기화를 진행
    - 두 번째 인자로 정점의 수를 전달

void GraphDestroy(UALGraph *pg);
    - 그래프 초기화 과정에서 할당한 리소스를 리턴

void AddEdge(UALGraph *pg ,int fromV ,int ToV);
    - 매개변수 fromV 와 ToV 로 전달된 정점을 연결하는 간선 그래프 추가

void ShowGraphEdgeInfo(UALGraph *pg );
    - 그래프 간선 정보 출력


구현 방법? : 인접 배열 혹은 인접 리스트