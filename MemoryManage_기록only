메모리 관리 및 메모리 동적 할당

고려사항을 잘 생각해서 code 를 작성해야한다.
프로그램을 작성하면 물리적인 자원 고려를 하지 않아서 생기는 문제가 있다!!

그렇다면 메모리와 cpu 사이의 우선순의를 둔다면? 당연히 MEMORY!!
cpu 가 좋지 않으면 단순히 작동이 느려지는것 이지만 memory는 프로그램이 펑 터져버린다.


//==========================================//
1. C 언어의 메모리 구조

    >메모리 구성
        ┌─────────┐         ┐
        ┃코드 영역┃          ┃
        └─────────┘         ┃
        ┌───────────┐       ┃
        ┃데이터 영역┃        ┃
        └───────────┘       ┃   => 운영체제에 의해 할당된 메모리 공간
        ┌────────┐          ┃
        ┃힙 영역 ┃           ┃
        └────────┘          ┃
        ┌─────────┐         ┃
        ┃스택 영역┃          ┃
        └─────────┘         ┘
    
            =메모리 공간을 나눠놓은 이유? 커다란 서랍장에 수납공간을 분류시킨것과 비슷
            =메모리 공간을 위와같이 나눠서 분류하면 데이터를 묶어서 저장 및 관리가 용이해짐
            =또한 메모리의 접근 속도 향상 기대



    >메모리 영역별로 저장되는 데이터의 유형

        코드 영역: 실행할 프로그램의 코드가 저장되는 메모리 공간
                   cpu는 코드 영역에 저장된 명령문을 하나씩 가져다가 실행

        데이터 역역: 전역변수와 static 변수가 할당되는 영역
                    프로그램 시작과 동시에 할당되어 종료까지 남아있는 특징의 변수가 저장되는 영역

        힙 영역: 프로그래머가 원하는 시점에 메모리 공간 할당 및 소멸을 하기 위한 영역
                 변수를 프로그래머가 직접 설정

        스택 영역: 지역변수 매개변수가 할당되는 영역
                   함수를 빠져나가면 소멸되는 변수를 저장하는 영역


        변수를 소멸시킬때 어디로 가서 무엇을 소멸시킬지 직관적으로 찾을 수 있는 구조.
        전역변수는 스택영역에 없기 때문에 조정할 때 데이터 영역에서만 찾으면 끝.




    >프로그램 실행에 따른 메모리 상태 변화 1


    int sum = 25;                                   ┌────데이터 영역───┐
                                                    ┃    sum = 25     ┃ 전역변수
    int main(int argc, char *argv[]){               └─────────────────┘
        int num1 = 10;                              ┌─────힙 영역─────┐
        fct(num1);                                  ┃                 ┃ 
        num1++;                                     ┃                 ┃
        fct(num1);                                  └─────────────────┘
        return 0;                                   ┌─────스택 영역────┐
    }                                               ┃                 ┃
                                                    ┃                 ┃
    void fct (int n){                               ┃                 ┃ 
        int num2 = 12;                              ┃ num2 = 12 (소멸)┃ 지역변수
        ...                                         ┃   n = 10(소멸)  ┃ 매개변수
    }                                               ┃ num1 = 10 -> 11 ┃ .... 반복
                                                    └─────────────────┘
                                                    return 0 한 이후에 모든 스택,데이터 영역 clean
                                                    함수 호출 순서 반대로 스택의 반환이 이루어짐


//==========================================//